from datetime import datetime, timedelta
from itertools import groupby
from operator import attrgetter
import google.generativeai as genai
import pytz
from templates.prompts import ARTICLE_SUMMARY_PROMPT, LINKEDIN_CONTENT_PROMPT
from config.settings import GEMINI_API_KEY
from utils.logger import logger
from utils.gemini_client import GeminiClient
from models.news_item import NewsItem

class Summarizer:
    def __init__(self):
        logger.info("Initializing Gemini AI summarizer")
        self.client = GeminiClient(GEMINI_API_KEY)
        self.client.initialize_model()

    def _generate_social_content(self, news_items):
        """Gera conteúdo otimizado para LinkedIn baseado nos artigos do período."""
        try:
            logger.info("Gerando conteúdo para LinkedIn")
            
            # Prepara o texto com todos os artigos
            articles_text = "\n\n".join([
                f"Título: {item.title}\n"
                f"Resumo: {item.summary or item.description}\n"
                f"Fonte: {item.source}"
                for item in news_items
            ])
            
            # Gera o conteúdo usando o prompt específico
            prompt = LINKEDIN_CONTENT_PROMPT.format(articles_text=articles_text)
            response = self.client.generate_content(prompt)
            
            if not response or not response.text:
                logger.warning("Não foi possível gerar conteúdo para LinkedIn")
                return None
                
            # Extrai apenas o conteúdo do post (remove o prefixo "Post:")
            content = response.text
            if "Post:" in content:
                content = content.split("Post:", 1)[1].strip()
            
            logger.info("Conteúdo para LinkedIn gerado com sucesso")
            return content
            
        except Exception as e:
            logger.error(f"Erro gerando conteúdo para LinkedIn: {str(e)}")
            return None

    def summarize(self, news_items, days=1):
        logger.info("=== Starting News Summarization ===")
        logger.info(f"Total articles to process: {len(news_items)}")
        
        # Get date range in UTC
        end_date = datetime.now(pytz.UTC).date()
        start_date = end_date - timedelta(days=days-1)  # -1 because we want to include today
        logger.info(f"Summarizer: Processing date range {start_date} to {end_date}")
        
        # Filter news items for the specified date range
        filtered_news = [
            item for item in news_items 
            if start_date <= item.published_date.date() <= end_date
        ]
        
        if not filtered_news:
            logger.warning(f"No news items found between {start_date} and {end_date}")
            return {}
            
        logger.info(f"Found {len(filtered_news)} news items in the date range")
        
        # Group news by date and generate summaries
        summarized_news = {}
        for item in filtered_news:
            try:
                item_date = item.published_date.date()
                if item_date not in summarized_news:
                    summarized_news[item_date] = {'items': []}
                    
                summary = self._generate_article_summary(item)
                # Create a new news item with the summary
                summarized_item = item.__class__(
                    title=item.title,
                    description=item.description,
                    link=item.link,
                    published_date=item.published_date,
                    source=item.source,
                    summary=summary
                )
                summarized_news[item_date]['items'].append(summarized_item)
            except Exception as e:
                logger.error(f"Error summarizing article {item.title}: {str(e)}")
                # Include the article without a summary
                item.summary = "Error generating summary for this article."
                item_date = item.published_date.date()
                if item_date not in summarized_news:
                    summarized_news[item_date] = {'items': []}
                summarized_news[item_date]['items'].append(item)
        
        # Gerar conteúdo para LinkedIn
        linkedin_content = self._generate_social_content(filtered_news)
        if linkedin_content:
            summarized_news['linkedin_content'] = linkedin_content
        
        logger.info(f"Completed summarization for news between {start_date} and {end_date}")
        return summarized_news

    def _generate_article_summary(self, news_item):
        try:
            logger.info(f"Generating summary for article: {news_item.title}")
            prompt = ARTICLE_SUMMARY_PROMPT.format(
                title=news_item.title,
                description=news_item.description,
                source=news_item.source
            )
            response = self.client.generate_content(prompt)
            logger.info("Article summary generated successfully")
            return response.text
        except Exception as e:
            logger.error(f"Error generating article summary: {str(e)}")
            return "Error generating summary. Please check the logs."
