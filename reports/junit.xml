<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="4" skipped="0" tests="31" time="15.831" timestamp="2025-05-23T22:16:52.522132" hostname="RODRIGO_CASA"><testcase classname="tests.test_basic" name="test_simple" time="0.004" /><testcase classname="tests.test_email_sender.TestEmailSender" name="test_email_content_formatting" time="0.011" /><testcase classname="tests.test_email_sender.TestEmailSender" name="test_empty_news_handling" time="0.002" /><testcase classname="tests.test_email_sender.TestEmailSender" name="test_send_email_smtp_error" time="0.013" /><testcase classname="tests.test_email_sender.TestEmailSender" name="test_send_email_success" time="0.011" /><testcase classname="tests.test_gemini_client.TestGeminiClient" name="test_calculate_delay" time="0.002" /><testcase classname="tests.test_gemini_client.TestGeminiClient" name="test_generate_content_success" time="0.003" /><testcase classname="tests.test_gemini_client.TestGeminiClient" name="test_generate_content_with_retry" time="5.004" /><testcase classname="tests.test_gemini_client.TestGeminiClient" name="test_initialize_model_success" time="0.002"><failure message="TypeError: unsupported operand type(s) for @: 'NoneType' and '_patch'">self = &lt;tests.test_gemini_client.TestGeminiClient testMethod=test_initialize_model_success&gt;, mock_model = &lt;MagicMock name='GenerativeModel' id='1653542516256'&gt;

    @patch('src.utils.gemini_client.genai.GenerativeModel')
    def test_initialize_model_success(self, mock_model):
        # Configure mock
        mock_model.return_value = MagicMock()
    
        # Test initialization
        result = self.client.initialize_model()
        self.assertTrue(result)
&gt;       self.assertIsNotNone(self.client.model)    @patch('src.utils.gemini_client.genai.GenerativeModel')
E       TypeError: unsupported operand type(s) for @: 'NoneType' and '_patch'

tests\test_gemini_client.py:19: TypeError</failure></testcase><testcase classname="tests.test_gemini_client.TestGeminiClient" name="test_initialize_model_with_quota_error" time="0.001"><failure message="TypeError: TestGeminiClient.test_initialize_model_with_quota_error() missing 1 required positional argument: 'mock_model'">self = &lt;unittest.case._Outcome object at 0x00000180FEC52D50&gt;, test_case = &lt;tests.test_gemini_client.TestGeminiClient testMethod=test_initialize_model_with_quota_error&gt;, subTest = False

    @contextlib.contextmanager
    def testPartExecutor(self, test_case, subTest=False):
        old_success = self.success
        self.success = True
        try:
&gt;           yield

C:\Users\rodri\AppData\Local\Programs\Python\Python313\Lib\unittest\case.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\Users\rodri\AppData\Local\Programs\Python\Python313\Lib\unittest\case.py:651: in run
    self._callTestMethod(testMethod)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;tests.test_gemini_client.TestGeminiClient testMethod=test_initialize_model_with_quota_error&gt;
method = &lt;bound method TestGeminiClient.test_initialize_model_with_quota_error of &lt;tests.test_gemini_client.TestGeminiClient testMethod=test_initialize_model_with_quota_error&gt;&gt;

    def _callTestMethod(self, method):
&gt;       if method() is not None:
E       TypeError: TestGeminiClient.test_initialize_model_with_quota_error() missing 1 required positional argument: 'mock_model'

C:\Users\rodri\AppData\Local\Programs\Python\Python313\Lib\unittest\case.py:606: TypeError</failure></testcase><testcase classname="tests.test_gemini_client.TestGeminiClient" name="test_list_models" time="0.004"><failure message="AssertionError: Lists differ: [&lt;MagicMock name='model1.name' id='1653542[55 chars]64'&gt;] != ['model1', 'model2']&#10;&#10;First differing element 0:&#10;&lt;MagicMock name='model1.name' id='1653542518272'&gt;&#10;'model1'&#10;&#10;+ ['model1', 'model2']&#10;- [&lt;MagicMock name='model1.name' id='1653542518272'&gt;,&#10;-  &lt;MagicMock name='model2.name' id='1653544157264'&gt;]">self = &lt;tests.test_gemini_client.TestGeminiClient testMethod=test_list_models&gt;, mock_list_models = &lt;MagicMock name='list_models' id='1653542508864'&gt;

    @patch('src.utils.gemini_client.genai.list_models')
    def test_list_models(self, mock_list_models):
        # Configure mock
        mock_list_models.return_value = [
            MagicMock(name="model1"),
            MagicMock(name="model2")
        ]
    
        # Test model listing
        models = self.client.list_models()
        self.assertEqual(len(models), 2)
&gt;       self.assertEqual(models, ["model1", "model2"])
E       AssertionError: Lists differ: [&lt;MagicMock name='model1.name' id='1653542[55 chars]64'&gt;] != ['model1', 'model2']
E       
E       First differing element 0:
E       &lt;MagicMock name='model1.name' id='1653542518272'&gt;
E       'model1'
E       
E       + ['model1', 'model2']
E       - [&lt;MagicMock name='model1.name' id='1653542518272'&gt;,
E       -  &lt;MagicMock name='model2.name' id='1653544157264'&gt;]

tests\test_gemini_client.py:112: AssertionError</failure></testcase><testcase classname="tests.test_gemini_client.TestGeminiClient" name="test_should_retry" time="10.004" /><testcase classname="tests.test_rss_reader.TestRssReader" name="test_empty_feed_urls" time="0.004" /><testcase classname="tests.test_rss_reader.TestRssReader" name="test_fetch_news_network_error" time="0.004" /><testcase classname="tests.test_rss_reader.TestRssReader" name="test_fetch_news_success" time="0.013"><failure message="AssertionError: 4 != 2">self = &lt;tests.test_rss_reader.TestRssReader testMethod=test_fetch_news_success&gt;, mock_get = &lt;MagicMock name='get' id='1653544158944'&gt;

    @patch('src.agents.rss_reader.requests.get')
    def test_fetch_news_success(self, mock_get):
        # Configure mock response
        mock_response = MagicMock()
        mock_response.content = self.sample_rss.encode('utf-8')
        mock_response.raise_for_status.return_value = None
        mock_get.return_value = mock_response
    
        # Test news fetching
        news_items = self.rss_reader.fetch_news()
    
        # Verify the results
&gt;       self.assertEqual(len(news_items), 2)  # One item per feed
E       AssertionError: 4 != 2

tests\test_rss_reader.py:49: AssertionError</failure></testcase><testcase classname="tests.test_rss_reader.TestRssReader" name="test_malformed_rss" time="0.005" /><testcase classname="tests.test_rss_reader.TestRssReader" name="test_missing_fields" time="0.012" /><testcase classname="tests.test_rss_reader.TestRssReader" name="test_parse_date_formats" time="0.002" /><testcase classname="tests.test_settings.TestSettings" name="test_validate_email_settings_success" time="0.001" /><testcase classname="tests.test_settings.TestSettings" name="test_validate_email_settings_missing_field" time="0.002" /><testcase classname="tests.test_settings.TestSettings" name="test_validate_email_settings_invalid_port" time="0.001" /><testcase classname="tests.test_settings.TestSettings" name="test_validate_email_settings_invalid_email" time="0.001" /><testcase classname="tests.test_settings.TestSettings" name="test_validate_rss_feeds_success" time="0.001" /><testcase classname="tests.test_settings.TestSettings" name="test_validate_rss_feeds_empty" time="0.001" /><testcase classname="tests.test_settings.TestSettings" name="test_validate_rss_feeds_invalid_url" time="0.001" /><testcase classname="tests.test_settings.TestSettings" name="test_validate_api_key_success" time="0.001" /><testcase classname="tests.test_settings.TestSettings" name="test_validate_api_key_missing" time="0.001" /><testcase classname="tests.test_summarizer.TestSummarizer" name="test_api_error_handling" time="0.006" /><testcase classname="tests.test_summarizer.TestSummarizer" name="test_empty_summary" time="0.005" /><testcase classname="tests.test_summarizer.TestSummarizer" name="test_no_current_day_news" time="0.004" /><testcase classname="tests.test_summarizer.TestSummarizer" name="test_summarize_current_day" time="0.005" /></testsuite></testsuites>